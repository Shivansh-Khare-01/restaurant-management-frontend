import "./orderCard.css";
import moment from "moment";
import { OrderCardController } from "./orderCard-controller";

export function OrderCard({ order }: any) {
  // Determine card style based on order type and status
  const {
    getCardClass,
    handleStatusChange,
    formatSnakeCase,
    getButtonClass,
    getTypeClass,
  } = OrderCardController(order);

  const getButtonText = () => {
    if (order?.status === "SERVED" || order?.status === "PICKED_UP" || order?.status === "NOT_PICKED_UP")
      return (
        <>
          <span>Order Done </span>
          <span>
            {order?.status === "NOT_PICKED_UP" ? (
              <svg
                width="18"
                height="18"
                viewBox="0 0 18 18"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M2.12258 13.794V12.0821C2.12258 11.915 2.08363 11.8047 1.96356 11.6781L0.751473 10.4579C-0.246431 9.46001 -0.254543 8.53188 0.751473 7.53397L1.96356 6.31377C2.08201 6.19532 2.12258 6.07687 2.12258 5.91786V4.19789C2.12258 2.77162 2.77973 2.12258 4.19789 2.12258H5.91786C6.07687 2.12258 6.19532 2.08363 6.31377 1.96356L7.53397 0.751473C8.53188 -0.246431 9.46001 -0.254543 10.4579 0.751473L11.6781 1.96356C11.8047 2.08201 11.915 2.12258 12.0821 2.12258H13.794C15.2203 2.12258 15.8693 2.78785 15.8693 4.19789V5.91786C15.8693 6.07687 15.9164 6.19532 16.0364 6.31377L17.2485 7.53397C18.2464 8.53188 18.2545 9.46001 17.2485 10.4579L16.0364 11.6781C15.918 11.8047 15.8693 11.915 15.8693 12.0821V13.794C15.8693 15.2203 15.2122 15.8693 13.794 15.8693H12.0821C11.915 15.8693 11.8047 15.9164 11.6781 16.0364L10.4579 17.2485C9.46001 18.2464 8.53188 18.2545 7.53397 17.2485L6.31377 16.0364C6.19532 15.918 6.07687 15.8693 5.91786 15.8693H4.19789C2.77973 15.8693 2.12258 15.2122 2.12258 13.794ZM8.77851 12.4878L12.5024 6.6172C12.5981 6.45818 12.7004 6.27645 12.7004 6.09472C12.7004 5.72963 12.3758 5.49273 12.0351 5.49273C11.8209 5.49273 11.6148 5.61118 11.4639 5.85782L8.08079 11.2936L6.47279 9.21824C6.27483 8.957 6.10121 8.87749 5.87891 8.87749C5.51383 8.87749 5.23636 9.17118 5.23636 9.53465C5.23636 9.70827 5.30776 9.89162 5.42621 10.049L7.41552 12.4894C7.62159 12.7669 7.84389 12.8691 8.11325 12.8691C8.3826 12.8691 8.61301 12.7425 8.77851 12.4894V12.4878Z"
                  fill="#3B413D"
                />
              </svg>
            ) : (
              <svg
                width="18"
                height="18"
                viewBox="0 0 18 18"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M2.12258 13.794V12.0821C2.12258 11.915 2.08363 11.8047 1.96356 11.6781L0.751473 10.4579C-0.24643 9.46001 -0.254543 8.53188 0.751473 7.53397L1.96356 6.31377C2.08201 6.19532 2.12258 6.07687 2.12258 5.91786V4.19789C2.12258 2.77162 2.77973 2.12258 4.19789 2.12258H5.91786C6.07687 2.12258 6.19532 2.08363 6.31377 1.96356L7.53397 0.751473C8.53188 -0.24643 9.46001 -0.254543 10.4579 0.751473L11.6781 1.96356C11.8047 2.08201 11.915 2.12258 12.0821 2.12258H13.794C15.2203 2.12258 15.8693 2.78785 15.8693 4.19789V5.91786C15.8693 6.07687 15.9164 6.19532 16.0364 6.31377L17.2485 7.53397C18.2464 8.53188 18.2545 9.46001 17.2485 10.4579L16.0364 11.6781C15.918 11.8047 15.8693 11.915 15.8693 12.0821V13.794C15.8693 15.2203 15.2122 15.8693 13.794 15.8693H12.0821C11.915 15.8693 11.8047 15.9164 11.6781 16.0364L10.4579 17.2485C9.46001 18.2464 8.53188 18.2545 7.53397 17.2485L6.31377 16.0364C6.19532 15.918 6.07687 15.8693 5.91786 15.8693H4.19789C2.77973 15.8693 2.12258 15.2122 2.12258 13.794ZM8.77851 12.4878L12.5024 6.6172C12.5981 6.45818 12.7004 6.27645 12.7004 6.09472C12.7004 5.72963 12.3758 5.49273 12.0351 5.49273C11.8209 5.49273 11.6148 5.61118 11.4639 5.85782L8.08079 11.2936L6.47279 9.21824C6.27483 8.957 6.10121 8.87749 5.87891 8.87749C5.51383 8.87749 5.23636 9.17118 5.23636 9.53465C5.23636 9.70827 5.30776 9.89162 5.42621 10.049L7.41552 12.4894C7.62159 12.7669 7.84389 12.8691 8.11325 12.8691C8.3826 12.8691 8.61301 12.7425 8.77851 12.4894V12.4878Z"
                  fill="#0E912F"
                />
              </svg>
            )}
          </span>
        </>
      );
    return (
      <>
        Processing{" "}
        <svg
          width="9"
          height="15"
          viewBox="0 0 9 15"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M0 13.3376V13.2072C0 11.2475 1.93858 9.25665 2.92269 8.23641C3.45427 7.67973 3.5017 7.0651 2.92269 6.45875C1.93858 5.43644 0 3.45598 0 1.48586V1.37411C0 0.465626 0.492055 0 1.31215 0H7.65156C8.47165 0 8.96371 0.465626 8.96371 1.37411V1.48586C8.96371 3.45598 7.02513 5.43644 6.04102 6.45668C5.46201 7.06303 5.50154 7.67973 6.04102 8.23434C7.02513 9.25458 8.96371 11.2454 8.96371 13.2052V13.3355C8.96371 14.244 8.47165 14.7096 7.65156 14.7096H1.31215C0.492055 14.7096 0 14.244 0 13.3355V13.3376ZM7.69108 2.96138C7.83534 2.68821 7.75827 2.46678 7.5073 2.46678H1.45641C1.19556 2.46678 1.11849 2.68821 1.27263 2.96138C1.71725 3.76019 3.37522 5.53785 3.89692 5.99312C4.32179 6.35735 4.63994 6.35735 5.05493 5.99312C5.58651 5.53785 7.24448 3.76019 7.68911 2.96138H7.69108Z"
            fill="#D87300"
          />
        </svg>
      </>
    );
  };

  return (
    <div className={getCardClass()}>
      <div className="order-card__header">
        <div className="order-card__header-left">
          <svg
            width="13"
            height="21"
            viewBox="0 0 13 21"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M4.00983 20.0144C3.2671 20.0144 2.76011 19.6292 2.78546 18.9493L2.97051 9.40976C2.97051 9.10345 2.83363 8.88765 2.54972 8.77626C1.32535 8.27736 0.831043 7.75524 0.904555 6.27012L1.15298 1.08149C1.17579 0.707887 1.39886 0.503683 1.7715 0.503683C2.14413 0.503683 2.35199 0.719489 2.35199 1.09309L2.27848 6.15874C2.27848 6.45344 2.50155 6.64605 2.78546 6.64605C3.1074 6.64605 3.31779 6.45344 3.31779 6.18195L3.40398 0.958501C3.40398 0.596503 3.6524 0.403901 4.00983 0.403901C4.36725 0.403901 4.62835 0.596503 4.62835 0.958501L4.70186 6.18195C4.70186 6.45344 4.92493 6.64605 5.23419 6.64605C5.54345 6.64605 5.74117 6.45344 5.74117 6.15874L5.68034 1.09309C5.68034 0.719489 5.90341 0.503683 6.26083 0.503683C6.61825 0.503683 6.84133 0.707887 6.854 1.08149L7.13791 6.27012C7.21142 7.75524 6.70444 8.27504 5.49275 8.77394C5.19617 8.88765 5.07196 9.10345 5.07196 9.40744L5.24433 18.947C5.26968 19.6269 4.7627 20.0121 4.00729 20.0121L4.00983 20.0144ZM10.5702 12.8998C10.5829 12.5494 10.4333 12.2988 10.0987 12.083L9.61706 11.7535C9.14556 11.4472 8.91235 11.0388 8.91235 10.4285V9.83905C8.91235 6.38383 9.87815 2.85899 11.3636 0.932975C11.6475 0.559375 11.8833 0.401581 12.2179 0.401581C12.5525 0.401581 12.8491 0.570977 12.8491 1.00259V18.9841C12.8491 19.6524 12.3674 20.0144 11.5867 20.0144C10.8059 20.0144 10.3243 19.6292 10.3496 18.8704L10.5727 12.8998H10.5702Z"
              fill="#007AFF"
            />
          </svg>

          <div className="order-card__details">
            <p className="order-card__order-number"># {order?.order_number}</p>
            {order?.type == "DINE_IN" && (
              <p className="order-card__subtext">Table-{order?.table_number}</p>
            )}
            {order?.created_at && (
              <p className="order-card__subtext">
                {moment(order?.created_at).local().format("hh:mm A")}
              </p>
            )}
            <p className="order-card__item-count">
              {order?.menu_items?.length} Item
            </p>
          </div>
        </div>

        <div className={getTypeClass()}>
          <div className="">
            {order?.type === "DINE_IN" && order?.status === "SERVED" ? (
              <>
                {formatSnakeCase(order?.type)}
                <div>Served</div>
              </>
            ) : (
              formatSnakeCase(order?.type)
            )}
          </div>
          {order?.status == "PROCESSING" && (
            <p className="order-card__subtext">
              Ongoing : {order?.remaining_time} min
            </p>
          )}

          {order?.type === "TAKE_AWAY" && order?.status !== "PROCESSING" && (
            <select
              className="order-card__select"
              onChange={(e) => {
                handleStatusChange(e, order?.id);
              }}
              defaultValue="" // Initial value set to placeholder
            >
              <option value="" disabled>
                {order?.status == "PICKED_UP" ? "Picked up" : "Not picked up"}
              </option>
              <option value="NOT_PICKED_UP">Not picked up</option>
              <option value="PICKED_UP">Picked up</option>
            </select>
          )}
        </div>
      </div>

      <div className="order-card__item-section">
        <div className="order-header-static">
          {" "}
          <span>1 x </span> Value Set Meals
        </div>
        <ul className="order-card__item-list">
          {order?.menu_items?.map((item: any, index: number) => (
            <li key={index} className="order-card__item">
              <span className="order-card__item-qty">{item?.quantity} Ã—</span>
              <span className="order-card__item-name">{item?.name}</span>
            </li>
          ))}
        </ul>
      </div>

      <div className="order-card__footer">
        <button className={getButtonClass()}>{getButtonText()}</button>
      </div>
    </div>
  );
}
